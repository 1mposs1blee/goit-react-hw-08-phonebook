{"version":3,"file":"static/js/621.83fc2824.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactBook/ContactBook.styled.jsx","pages/ContactBook/ContactBook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ToastText = styled.span`\n  font-weight: 600;\n`;\n\nexport const ContactsListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n`;\n\nexport const ListItemText = styled.p`\n  font-weight: 600;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ButtonDeleteContact = styled.button`\n  font-weight: 600;\n  width: 100px;\n  height: 30px;\n  border-radius: 4px;\n  background-color: rgb(63, 81, 181);\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: rgb(255, 255, 255);\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease-in-out;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(0, 170, 255);\n  }\n`;\n\nexport const LineWrapper = styled.hr`\n  width: 100%;\n  height: 1px;\n  background-color: #000;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState } from 'react';\nimport { contactsOperations } from 'redux/ContactsSlice';\nimport {\n  ContactsListItem,\n  ListItemText,\n  ButtonDeleteContact,\n  LineWrapper,\n  ToastText,\n} from './ContactItem.styled';\n\nexport const ContactItem = ({ contact }) => {\n  const [contactIsLoading, setContactIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const { name, number, id } = contact;\n\n  const handleClick = async () => {\n    setContactIsLoading(true);\n\n    await dispatch(contactsOperations.deleteContact(id))\n      .then(({ meta: { requestStatus }, payload }) => {\n        if (requestStatus === 'rejected') throw new Error(payload);\n      })\n      .catch(({ message }) => {\n        toast.error(<ToastText>{message}</ToastText>, {\n          autoClose: 2000,\n        });\n      });\n\n    setContactIsLoading(false);\n  };\n\n  return (\n    <>\n      <ToastContainer />\n      <ContactsListItem>\n        <ListItemText>\n          {name}: {number}\n        </ListItemText>\n        <ButtonDeleteContact\n          disabled={contactIsLoading}\n          onClick={handleClick}\n          type=\"button\"\n        >\n          {contactIsLoading ? 'Loading...' : 'Delete'}\n        </ButtonDeleteContact>\n      </ContactsListItem>\n      <LineWrapper />\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n`;\n\nexport const MessageLoading = styled.p`\n  font-weight: 600;\n`;\n\nexport const MessageNotFound = styled.p`\n  font-weight: 600;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts, selectIsLoading } from 'redux/ContactsSlice';\nimport { ContactItem } from 'components/ContactItem';\nimport {\n  ContactsList,\n  MessageNotFound,\n  MessageLoading,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  if (filteredContacts.length > 0) {\n    return (\n      <ContactsList>\n        {filteredContacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </ContactsList>\n    );\n  }\n\n  if (isLoading) {\n    return <MessageLoading>Loading...</MessageLoading>;\n  }\n\n  return <MessageNotFound>No contacts found</MessageNotFound>;\n};\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const ToastText = styled.span`\n  font-weight: 600;\n`;\n\nexport const ContactsForm = styled(Form)`\n  margin-bottom: 10px;\n  padding: 10px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n\n  border: 2px solid black;\n  border-radius: 5px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 600;\n\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Input = styled(Field)`\n  font-weight: 600;\n  width: 500px;\n  height: 25px;\n`;\n\nexport const Button = styled.button`\n  font-weight: 600;\n  width: 100px;\n  height: 30px;\n  border-radius: 4px;\n  background-color: rgb(63, 81, 181);\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: rgb(255, 255, 255);\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease-in-out;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(0, 170, 255);\n  }\n`;\n\nexport const ErrorText = styled.p`\n  font-weight: 600;\n  color: red;\n  max-width: 500px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport { selectContacts, contactsOperations } from 'redux/ContactsSlice';\nimport {\n  ContactsForm,\n  Label,\n  Input,\n  Button,\n  ErrorText,\n  ToastText,\n} from './ContactForm.styled';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n    )\n    .max(25, 'Name must not exceed 25 characters.')\n    .required('Name is required.'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with '+'.\"\n    )\n    .max(25, 'Phone number must not exceed 25 characters.')\n    .required('Phone number is required.'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\nconst nameInputId = nanoid();\nconst telInputId = nanoid();\n\nexport const ContactForm = () => {\n  const [formIsLoading, setFormIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = async ({ name, number }, { resetForm }) => {\n    setFormIsLoading(true);\n\n    const trimName = name.trim();\n\n    if (\n      contacts.find(({ name }) => name.toLowerCase() === trimName.toLowerCase())\n    ) {\n      toast.error(<ToastText>{trimName} is already in contacts.</ToastText>, {\n        autoClose: 2000,\n      });\n\n      resetForm();\n\n      setFormIsLoading(false);\n\n      return;\n    }\n\n    await dispatch(contactsOperations.addContact({ name: trimName, number }))\n      .then(({ meta: { requestStatus }, payload }) => {\n        if (requestStatus === 'rejected') throw new Error(payload);\n      })\n      .catch(({ message }) => {\n        toast.error(<ToastText>{message}</ToastText>, {\n          autoClose: 2000,\n        });\n      });\n\n    resetForm();\n\n    setFormIsLoading(false);\n  };\n\n  return (\n    <>\n      <ToastContainer />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <ContactsForm>\n          <Label htmlFor={nameInputId}>\n            Name\n            <Input type=\"text\" id={nameInputId} name=\"name\" required />\n            <FormError name=\"name\" />\n          </Label>\n          <Label htmlFor={telInputId}>\n            Number\n            <Input type=\"tel\" id={telInputId} name=\"number\" required />\n            <FormError name=\"number\" />\n          </Label>\n          <Button disabled={formIsLoading} type=\"submit\">\n            {formIsLoading ? 'Loading...' : 'Add contact'}\n          </Button>\n        </ContactsForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const LabelFilterInput = styled.label`\n  margin-bottom: 18px;\n  font-weight: 600;\n  display: flex;\n\n  justify-content: center;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const FilterInput = styled.input`\n  font-weight: 600;\n  width: 500px;\n  height: 25px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectFilter, changeFilter } from 'redux/FilterSlice';\nimport { LabelFilterInput, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterInputId = nanoid();\n\n  const onChangeInput = ({ currentTarget }) =>\n    dispatch(changeFilter(currentTarget.value));\n\n  return (\n    <LabelFilterInput htmlFor={filterInputId}>\n      Find contacts by name\n      <FilterInput\n        onChange={onChangeInput}\n        type=\"text\"\n        id={filterInputId}\n        name=\"filter\"\n        value={useSelector(selectFilter)}\n      />\n    </LabelFilterInput>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ToastText = styled.span`\n  font-weight: 600;\n`;\n\nexport const Wrapper = styled.div`\n  margin-top: 50px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  flex-wrap: wrap;\n`;\n\nexport const PhoneBookTitle = styled.h1`\n  font-weight: 600;\n  margin-bottom: 10px;\n`;\n\nexport const ContactsTitle = styled.h1`\n  font-weight: 600;\n  margin-bottom: 10px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { contactsOperations } from 'redux/ContactsSlice';\nimport { ContactList } from 'components/ContactList';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport {\n  Wrapper,\n  PhoneBookTitle,\n  ContactsTitle,\n  ToastText,\n} from './ContactBook.styled';\n\nconst ContactBook = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts())\n      .then(({ meta: { requestStatus }, payload }) => {\n        if (requestStatus === 'rejected') throw new Error(payload);\n      })\n      .catch(({ message }) => {\n        toast.error(<ToastText>{message}</ToastText>, {\n          autoClose: 2000,\n        });\n      });\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <ToastContainer />\n      <PhoneBookTitle>ContactBook</PhoneBookTitle>\n      <ContactForm />\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      <ContactList />\n    </Wrapper>\n  );\n};\n\nexport default ContactBook;\n"],"names":["ToastText","styled","ContactsListItem","ListItemText","ButtonDeleteContact","LineWrapper","ContactItem","contact","useState","contactIsLoading","setContactIsLoading","dispatch","useDispatch","name","number","id","handleClick","contactsOperations","then","requestStatus","meta","payload","Error","catch","message","toast","autoClose","disabled","onClick","type","ContactsList","MessageLoading","MessageNotFound","ContactList","filteredContacts","useSelector","selectFilteredContacts","isLoading","selectIsLoading","length","map","ContactsForm","Form","Label","Input","Field","Button","ErrorText","FormError","render","schema","yup","shape","matches","max","required","initialValues","nameInputId","nanoid","telInputId","ContactForm","formIsLoading","setFormIsLoading","contacts","selectContacts","handleSubmit","resetForm","trimName","trim","find","toLowerCase","validationSchema","onSubmit","htmlFor","LabelFilterInput","FilterInput","Filter","filterInputId","onChange","currentTarget","changeFilter","value","selectFilter","Wrapper","PhoneBookTitle","ContactsTitle","useEffect"],"sourceRoot":""}